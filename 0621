
--대소문자 변환 문자함수
SELECT UPPER('Oracle Database'),
       LOWER('Oracle Database'),
       INITCAP('Oracle Database')
FROM dual;


SELECT employee_id last_name, UPPER(last_name),
       job_id, INITCAP(job_id)
FROM employees;   

SELECT employee_id, last_name, job_id
FROM employees
WHERE last_name = 'king';


SELECT employee_id, last_name, job_id
FROM employees
WHERE LOWER(last_name) = 'king';

SELECT employee_id, last_name, job_id
FROM employees
WHERE last_name = INITCAP('king');


--여러가지 문자 함수
SELECT CONCAT('Hello','World') FROM dual;
SELECT CONCAT(CONCAT('Hello',' '), 'World') FROM dual;


SELECT employee_id, CONCAT(first_name, last_name) AS full_name,
       job_id, email
FROM employees;

SELECT employee_id, CONCAT(CONCAT(first_name,' '), last_name) AS full_name,
       job_id, email
FROM employees;

SELECT SUBSTR('HelloWorld', 1,5), SUBSTR('HelloWorld', 6), 
       SUBSTR('HelloWorld', -5,5)
FROM dual;

SELECT * FROM employees
WHERE SUBSTR(last_name, -1,1) = 'n';

SELECT * FROM employees
WHERE last_name LIKE '%n';

SELECT LENGTH('Oracle Database'), LENGTH('오라클 데이터베이스')
FROM dual;

SELECT * FROM employees
WHERE LENGTH(last_name) > 6;

SELECT INSTR('HelloWorld','l') FROM dual;

SELECT INSTR('HelloWorld','l', 1,2),INSTR('HelloWorld','l', 1,3)  FROM dual;

SELECT employee_id, last_name, INSTR(last_name, 'a')
FROM employees;

SELECT * FROM employees
WHERE INSTR(last_name, 'a') = 0;

SELECT * FROM employees
WHERE last_name NOT LIKE '%a%';

SELECT employee_id, RPAD(last_name, 15, '*') AS last_name,
       LPAD(salary, 10, '*') AS salary
FROM employees;

SELECT REPLACE('Jack and Jue','J','Bl') FROM dual;

SELECT employee_id, last_name, 
       REPLACE(last_name,SUBSTR(last_name, 2,2),'**') AS result
FROM employees;   

SELECT TRIM('H' FROM 'Hellowold'),  TRIM('d' FROM 'Hellowold') 
FROM dual;

SELECT TRIM('w' FROM 'window'), TRIM(LEADING 'w' FROM 'window'),
       TRIM(TRAILING 'w' FROM 'window')
FROM dual;

SELECT TRIM(0 FROM 000012345670), TRIM(LEADING 0 FROM 000012345670)  
FROM dual;

--TRIM은 하나만
SELECT TRIM('xy' FROM 'xyxyxykkkkxy') FROM dual;


--문자함수응용예제
SELECT employee_id, CONCAT(first_name, last_name) NAME, 
       job_id, LENGTH (last_name), 
       INSTR(last_name, 'a') "Contains 'a'?"
FROM   employees
WHERE  SUBSTR(job_id, 4) = 'REP';


--숫자함수
SELECT ROUND(45.923,2), ROUND(45.923), ROUND(45.923,-1)
FROM   DUAL;

SELECT TRUNC(45.923,2), TRUNC(45.923), TRUNC(45.923,-1)
FROM   DUAL;

SELECT last_name, salary, MOD(salary, 5000)
FROM   employees
WHERE  job_id = 'SA_REP';


--날짜연산
SELECT sysdate FROM dual;

SELECT sysdate+10 FROM dual;

SELECT employee_id, last_name, hire_date, sysdate-hire_date AS 근무일수
FROM employees;

SELECT employee_id, last_name, hire_date, 
       TRUNC(sysdate-hire_date) AS 근무일수
FROM employees;

SELECT last_name, ROUND((SYSDATE-hire_date)/7) AS WEEKS
FROM   employees
WHERE  department_id = 90;


--날짜함수
SELECT employee_id, last_name, 
       TRUNC(MONTHS_BETWEEN(sysdate, hire_date))AS 근무기간
FROM employees;

SELECT ADD_MONTHS(sysdate, 3), LAST_DAY(sysdate)
FROM dual;

SELECT NEXT_DAY(sysdate, '금요일'), NEXT_DAY(sysdate, '금'),
       NEXT_DAY(sysdate, 6)
FROM dual; 

SELECT NEXT_DAY(sysdate, 'FRIDAY') FROM dual;
SELECT ROUND(sysdate, 'year'), ROUND(sysdate, 'month'), 
       ROUND(sysdate, 'dd'), ROUND(sysdate, 'day')
FROM dual; 

SELECT TRUNC(sysdate, 'year'), TRUNC(sysdate, 'month'), 
       TRUNC(sysdate, 'dd'), TRUNC(sysdate, 'day')
FROM dual;


--날짜데이터에 TO_CHAR 함수 사용
SELECT employee_id, last_name, hire_date
FROM employees;


SELECT employee_id, last_name, TO_CHAR(hire_date, 'yyyy-mm-dd')
FROM employees;

SELECT employee_id, last_name, 
       TO_CHAR(hire_date, 'yyyy-mm-dd day') AS hire_date,
       TO_CHAR(hire_date, 'q') AS 분기,
       TO_CHAR(hire_date, 'w')||'주차' AS 주수
FROM employees;

SELECT employee_id, last_name, TO_CHAR(hire_date, 'yyyy-mm-dd hh24:mi:ss')
FROM employees;


--날짜 연산에 응용
SELECT TO_CHAR(sysdate, 'yyyy/mm/dd hh24:mi:ss'),
       TO_CHAR(sysdate+3/24,'yyyy/mm/dd hh24:mi:ss'),
       TO_CHAR(sysdate+40/(24*60), 'yyyy/mm/dd hh24:mi:ss')
FROM dual;


--숫자데이터에 TO_CHAR 사용하기
SELECT employee_id, last_name, salary, 
       TO_CHAR(salary, '$999,999')
FROM employees;

SELECT employee_id, last_name, salary, 
       TO_CHAR(salary, '$999,999.99'),
       TO_CHAR(salary, '$099,999.99')
FROM employees;

SELECT employee_id, last_name, salary, 
       TO_CHAR(salary, 'L999,999')
FROM employees;

ALTER SESSION SET nls_territory=japan;
SELECT employee_id, last_name, salary, 
       TO_CHAR(salary, 'L999,999')
FROM employees;

ALTER SESSION SET nls_territory=korea;
SELECT employee_id, last_name, salary, 
       TO_CHAR(salary, 'L999,999')
FROM employees;


--TO_DATE 함수
SELECT employee_id, last_name, salary, hire+_date
FROM employees
WHERE hire_date > '1999/12/31';

SELECT employee_id, last_name, salary, hire_date
FROM employees
WHERE hire_date > TO_DATE('1999/12/31', 'yyyy/mm/dd');

SELECT employee_id, last_name, salary, hire_date
FROM employees
WHERE hire_date > TO_DATE('99/12/31', 'yy/mm/dd');

SELECT employee_id, last_name, salary, hire_date
FROM employees
WHERE hire_date > TO_DATE('99/12/31', 'rr/mm/dd');


--TO_NUMBER 함수
SELECT employee_id, last_name, salary, hire_date
FROM employees
WHERE salary > $8,000;
-->>오류남!!

SELECT employee_id, last_name, salary, hire_date
FROM employees
WHERE salary > '$8,000';

--형식까지 알려줘야해!!
SELECT employee_id, last_name, salary, hire_date
FROM employees
WHERE salary > TO_NUMBER('$8,000','$9,999');


--함수중첩
SELECT last_name,
       UPPER(CONCAT(SUBSTR (LAST_NAME, 1, 8), '_US'))
FROM   employees
WHERE  department_id = 60;

SELECT employee_id, last_name,   
       TO_CHAR(ROUND((salary/7), 2),'99G999D99', 'NLS_NUMERIC_CHARACTERS = '',.'' ') 
         AS "Formatted Salary"
FROM employees;


--일반함수 NVL
SELECT employee_id, last_name, salary, NVL(commission_pct, 0)
FROM employees;

SELECT employee_id, last_name, salary+salary*commission_pct as monthly_sal
FROM employees;

SELECT employee_id, last_name, 
       salary+salary*NVL(commission_pct,0) as monthly_sal
FROM employees;


--일반함수 NVL2
SELECT employee_id, last_name, 
       salary+salary*NVL(commission_pct,0) as monthly_sal,
       NVL2(commission_pct, 'Y', 'N') AS comm_get
FROM employees;

SELECT last_name,  salary, commission_pct,
       NVL2(commission_pct, 'SAL+COMM', 'SAL') income
FROM   employees WHERE department_id IN (50, 80);


--일반함수 NULL IF
SELECT employee_id, last_name, 
       salary+salary*NVL(commission_pct,0) as monthly_sal,
       NVL2(commission_pct, 'Y', 'N') AS comm_get,
       NULLIF(salary,  salary+salary*NVL(commission_pct,0)) AS result
FROM employees;

SELECT first_name, LENGTH(first_name) "expr1", 
       last_name,  LENGTH(last_name)  "expr2",
       NULLIF(LENGTH(first_name), LENGTH(last_name)) result
FROM   employees;


--일반함수 COALESCE
SELECT employee_id, commission_pct, manager_id,
       COALESCE(commission_pct, manager_id, 1234) AS result
FROM employees;  

SELECT last_name, employee_id,
        COALESCE(TO_CHAR(commission_pct),TO_CHAR(manager_id),
                  'No commission and no manager') 
FROM employees;


--CASE 구문 사용     
SELECT last_name, job_id, salary,
       CASE job_id WHEN 'IT_PROG'  THEN  1.10*salary
                   WHEN 'ST_CLERK' THEN  1.15*salary
                   WHEN 'SA_REP'   THEN  1.20*salary
       ELSE      salary END     "REVISED_SALARY"
FROM   employees;


SELECT last_name, job_id, salary,
       CASE  WHEN job_id = 'IT_PROG'  THEN  1.10*salary
             WHEN job_id = 'ST_CLERK' THEN  1.15*salary
             WHEN job_id ='SA_REP'   THEN  1.20*salary
       ELSE      salary END     "REVISED_SALARY"
FROM   employees;

SELECT employee_id, last_name, salary,
       CASE WHEN salary < 5000 THEN 'L'
            WHEN salary BETWEEN 5000 AND 9000 THEN 'M'
       ELSE 'H' END AS salary_grade
FROM employees;       


--NVL2 함수 결과를 CASE 문으로 대체 
SELECT employee_id, last_name, 
       salary+salary*NVL(commission_pct,0) as monthly_sal,
       CASE WHEN commission_pct IS NOT NULL THEN 'Y'
       ELSE 'N' END AS comm_get
FROM employees;


--DECODE 함수 
SELECT last_name, job_id, salary,
       DECODE(job_id, 'IT_PROG',  1.10*salary,
                      'ST_CLERK', 1.15*salary,
                      'SA_REP',   1.20*salary,
              salary)
       REVISED_SALARY
FROM   employees;


SELECT last_name, salary,
       DECODE (TRUNC(salary/2000, 0),
                         0, 0.00,      --2000보다 작을 때
                         1, 0.09,      --2000~4000사이
                         2, 0.20,
                         3, 0.30,
                         4, 0.40,
                         5, 0.42,
                         6, 0.44,
                            0.45) TAX_RATE
FROM   employees
WHERE  department_id = 80;

SELECT employee_id, last_name, 
    CASE WHEN commission_pct IS NOT NULL THEN 'YES'
    ELSE 'NO' END "commission"
    FROM employees;


--그룹함수!!

SELECT MIN(salary), MAX(salary), AVG(salary), SUM(salary)
FROM employees;

SELECT MIN(salary), MAX(salary), AVG(salary), SUM(salary)
FROM employees
WHERE department_id IN (50,60);

--count, min, max 는 모든 타입이 가능!
SELECT MIN(last_name), MAX(last_name)
FROM employees;

SELECT MIN(hire_date), MAX(hire_date)
FROM employees;

SELECT AVG(commission_pct), AVG(NVL(commission_pct,0))
FROM employees;

--count 함수 사용법
SELECT COUNT(*) , COUNT(department_id), COUNT(DISTINCT department_id)
FROM employees;


--group by절 이용
SELECT COUNT(*), MIN(salary), SUM(salary)
FROM employees
GROUP BY department_id;

--group by 이용하면 select 안에 쓸 수 있다. 
SELECT department_id, job_id, COUNT(*), MIN(salary), SUM(salary)
FROM employees
WHERE department_id >50
GROUP BY department_id, job_id
ORDER BY 1,2;

--오류남
SELECT department_id, job_id, COUNT(*), MIN(salary), SUM(salary)
FROM employees
WHERE count(*) <>1
GROUP BY department_id, job_id
ORDER BY 1,2;

--where 대신 having(group by 다음에 고를거야!.. group제한) where 은 행 제한.
SELECT department_id, job_id, COUNT(*), MIN(salary), SUM(salary)
FROM employees
GROUP BY department_id, job_id
HAVING count(*) <>1
ORDER BY 1,2;

--시험에 잘 나오는고: 그룹함수를 그룹함수에 묶는 거는 한 번만 가능.(중첩 1회만 가능)
SELECT MAX(SUM(salary))
FROM employees
GROUP BY job_id;

--그룹함수를 중접될 때 group by에 오는 컬럼도 올 수 없다. 
SELECT job_id , MAX(SUM(salary))
FROM employees
GROUP BY job_id;

--GROUP함수의 추가기능!:
--중간소계(SUB TOTAL) => GROUP BY ROLLUP
SELECT department_id, job_id, COUNT(*), MIN(salary), SUM(salary)
FROM employees
GROUP BY ROLLUP( department_id, job_id)
ORDER BY 1,2;


--cube 할 수 있는거 전부 다 group호ㅏ 
SELECT department_id, job_id, COUNT(*), MIN(salary), SUM(salary)
FROM employees
GROUP BY CUBE(department_id, job_id)
ORDER BY 1,2;

--grouping set: 전부 grouping한거 + grouping안한거!
SELECT department_id, job_id, COUNT(*), MIN(salary), SUM(salary)
FROM employees
GROUP BY GROUPING SETS(department_id, job_id,())
ORDER BY 1,2;
